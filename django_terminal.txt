
#7.1 ~ #7.2 => Django QuerySet 부분.


https://docs.djangoproject.com/en/3.1/ref/models/querysets/

python manage.py shell

from users.models import User

dir(User), vars(User)

User.objects.all() -> User에 등록된 모든 사용자를 보여준다.

all_user = User.objects.all() 

all_user.filter(superhost = True) -> superhost인 사람들을 필터링 해줌.


JB = User.objects.get(username="admin")

--> 확인해 보면, Foreign Key들은, room_set, review_set 처럼, set 형태로 갖추어져 있다.

JB.room_set.all() 을 쳐보면, admin(JB)에 소속되어있는 방이 모두 나오는 것을 볼 수 있다.

즉, panel에서는 user에서 room을 확인 못하지만, set이라는 것을 통하여 연결이 되어있고, 터미널에서는 양방향으로 set으로 나옴.
==> set = foreign key 대상이 element를 얻어내는 방법.

set의 이름을 정해 주는 법. (in ForeignKey)
1. foriegn key에 related_name = "" 설정해준다.
2. makemigrations, migrate를 해준다.
host = models.ForeignKey("users.USer", related_name="rooms", ondelete = models.CASCADE)

>>> from users.models import User
>>> JB = User.objects.get(username="admin")
>>> JB.rooms.all()
<QuerySet [<Room: JB's Room!>]>
>>> JB.room_set.all()
Traceback (most recent call last):


Many To Many에서는 더 간단하다.

ex) room 내에있는 amenities를 가져오고 싶다면.

>>> from rooms.models import Room
>>> room = Room.objects.get(id=1)   -> Room 안에있는것 중 id 1번에 해당하는 것. (url창에도 나옴.)
>>> room
<Room: JB's Room!>

>>> room.amenities.all()
<QuerySet [<Amenity: Washer>, <Amenity: Shower>]>


>>> startswith = User.objects.filter(username__startswith="ad")
>>> print(startswith)
<QuerySet [<User: admin>]>
위와 같이, object 내에서도 또한 filter 할수 있다.

amenity의 1번인 WiFi가 있는 방을 모두 찾고 싶을 때.

$ python manage.py shell
>>> from rooms.models import Amenity
>>> Amenity.objects.all()
>>> a = Amenity.objects.get(id=1)
>>> a.rooms.all()      // amenity에 related_name="rooms"를 해준 상태.
>>> a
<Amenity: WI-Fi>
>>> a.rooms.all()
<QuerySet [<Room: JB's Room!>]>
